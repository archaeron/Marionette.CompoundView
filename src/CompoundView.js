// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Marionette.CompoundView = (function(_super) {
    __extends(CompoundView, _super);

    CompoundView.prototype.className = 'compound-view';

    CompoundView.prototype.regions = {
      listViewContainer: ".list-view-container",
      singleElementViewContainer: '.single-element-container'
    };

    function CompoundView(options) {
      CompoundView.__super__.constructor.call(this, options);
      this.listenTo(this, 'list-element:selected', this.renderSingleElement);
    }

    CompoundView.prototype.getListView = function() {
      return Marionette.getOption(this, "listView");
    };

    CompoundView.prototype.getCollection = function() {
      return Marionette.getOption(this, "collection");
    };

    CompoundView.prototype.getDetailView = function() {
      return Marionette.getOption(this, "itemView");
    };

    CompoundView.prototype.render = function() {
      var events, that;
      CompoundView.__super__.render.call(this);
      this.renderList();
      that = this;
      events = {
        'click': function() {
          return that.trigger('list-element:selected', this);
        }
      };
      return this.listView.children.each(function(view) {
        return view.delegateEvents(events);
      });
    };

    CompoundView.prototype.renderList = function() {
      var ListView;
      ListView = this.getListView();
      this.listView = new ListView({
        collection: this.getCollection()
      });
      return this.listViewContainer.show(this.listView);
    };

    CompoundView.prototype.renderSingleElement = function(view) {
      var DetailView, detailView;
      console.log(view);
      DetailView = this.getDetailView();
      detailView = new DetailView({
        model: view.model
      });
      return this.singleElementViewContainer.show(detailView);
    };

    return CompoundView;

  })(Marionette.Layout);

}).call(this);
