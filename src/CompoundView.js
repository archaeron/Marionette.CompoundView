// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Marionette.CompoundView = (function(_super) {
    __extends(CompoundView, _super);

    CompoundView.prototype.className = 'compound-view';

    CompoundView.prototype.regions = {
      listViewContainer: ".list-view-container",
      singleElementViewContainer: '.single-element-container'
    };

    function CompoundView(options) {
      CompoundView.__super__.constructor.call(this, options);
      this.listenTo(this, 'list-element:selected', function(view) {
        return this.renderSingleElement(view.model);
      });
      if (options.breakWidth && this.hasHistorySupport()) {
        this.mq = window.matchMedia("(max-width: " + options.breakWidth + "px)");
      }
    }

    CompoundView.prototype.shouldBreak = function() {
      if (this.mq != null) {
        return this.mq.matches;
      } else {
        return false;
      }
    };

    CompoundView.prototype.hasHistorySupport = function() {
      return typeof history !== "undefined" && history !== null;
    };

    CompoundView.prototype.getListView = function(collection) {
      var CollectionView, ListView, listItemView, _ref;
      ListView = Marionette.getOption(this, "listView");
      if (ListView != null) {
        return new ListView({
          collection: collection
        });
      } else {
        listItemView = Marionette.getOption(this, "listItemView");
        CollectionView = (function(_super1) {
          __extends(_Class, _super1);

          function _Class() {
            _ref = _Class.__super__.constructor.apply(this, arguments);
            return _ref;
          }

          _Class.prototype.itemView = listItemView;

          return _Class;

        })(Marionette.CollectionView);
        return new CollectionView({
          collection: collection
        });
      }
    };

    CompoundView.prototype.getCollection = function() {
      return Marionette.getOption(this, "collection");
    };

    CompoundView.prototype.getDetailView = function() {
      return Marionette.getOption(this, "itemView");
    };

    CompoundView.prototype.render = function() {
      var events, that;
      CompoundView.__super__.render.call(this);
      this.renderList();
      that = this;
      events = {
        'click': function() {
          return that.trigger('list-element:selected', this);
        }
      };
      this.listView.children.each(function(view) {
        return view.delegateEvents(events);
      });
      if (!this.shouldBreak()) {
        return this.renderSingleElement(this.getCollection().first());
      }
    };

    CompoundView.prototype.renderList = function() {
      this.listView = this.getListView(this.getCollection());
      return this.listViewContainer.show(this.listView);
    };

    CompoundView.prototype.renderSingleElement = function(model) {
      var DetailView, detailView;
      DetailView = this.getDetailView();
      detailView = new DetailView({
        model: model
      });
      return this.singleElementViewContainer.show(detailView);
    };

    return CompoundView;

  })(Marionette.Layout);

}).call(this);
